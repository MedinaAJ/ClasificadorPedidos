/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package classifyorders;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.text.Normalizer;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.openxml4j.util.ZipSecureFile;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Color;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.PrintSetup;
import org.apache.poi.xssf.usermodel.XSSFColor;

/**
 *
 * @author Alejandro
 */
public class Main extends javax.swing.JFrame {

    private File archivo_procesar;
    private String ruta;
    private Conectar c;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        Dimension pantalla = Toolkit.getDefaultToolkit().getScreenSize();
        int height = pantalla.height;
        int width = pantalla.width;
        setSize(width / 3, height / 5);

        setLocationRelativeTo(null);

        c = new Conectar();
        c.PrepararBaseDatos();

        this.archivo_procesar = null;
        this.ruta = null;

        gr = new GestorRetales(c);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtBuscar = new javax.swing.JTextField();
        bntBuscar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnClasificar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtBuscar.setText("Selecciona el archivo a clasificar");
        txtBuscar.setToolTipText("");
        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });

        bntBuscar.setText("Buscar");
        bntBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntBuscarActionPerformed(evt);
            }
        });

        jLabel1.setText("Desarrollado por Alejandro Medina");

        btnClasificar.setText("Clasificar");
        btnClasificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClasificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bntBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(43, 43, 43))
            .addComponent(btnClasificar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntBuscar))
                .addGap(18, 18, 18)
                .addComponent(btnClasificar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarActionPerformed

    private void bntBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntBuscarActionPerformed
        // TODO add your handling code here:
        //Se crea el JFileChooser. Se le indica que la ventana se abra en el directorio actual
        JFileChooser fileChooser = new JFileChooser(".");
        //Se crea el filtro. El primer parámetro es el mensaje que se muestra,
        //el segundo es la extensión de los ficheros que se van a mostrar      
        FileFilter filtro = new FileNameExtensionFilter("Archivos excel (.xlsx)", "xlsx");
        //Se le asigna al JFileChooser el filtro
        fileChooser.setFileFilter(filtro);
        //se muestra la ventana
        int valor = fileChooser.showOpenDialog(fileChooser);
        if (valor == JFileChooser.APPROVE_OPTION) {
            String ruta = fileChooser.getSelectedFile().getAbsolutePath();
            this.ruta = ruta;
            File f = new File(ruta);
            this.archivo_procesar = f;
            txtBuscar.setText(ruta);
        } else {
            JOptionPane.showMessageDialog(null, "Error: No se ha seleccionado ningún fichero", "alert", JOptionPane.ERROR_MESSAGE);
            //System.out.println("No se ha seleccionado ningún fichero");
        }
    }//GEN-LAST:event_bntBuscarActionPerformed

    private String algoritmoClasificacion(String texto) {
        // Si se quiere mejorar el algoritmo ahi que añadir casos utiles al IF, al igual que puede mejorar tambien puede empeorar
        if (texto.contains("25 kg/m3(Azul)") || texto.contains("Extrafirme") || texto.contains("D.25") || texto.contains("D. 25") || texto.contains("densidad 25") || texto.contains("25kg") || texto.contains("25 kg")) {
            return "25";
        } else if (texto.contains("HR Suave 30 kg") || texto.contains("HR Suave") || texto.contains("HR 30") || texto.contains("HR Suave 30 kg") || texto.contains("Suave de 30 kg")) {
            return "30";
        } else if (texto.contains("ExtraSuave 23kg/m3(Blanco)") || texto.contains("ExtraSuave") || texto.contains("23kg/m3")) {
            return "23";
        } else if (texto.contains("Media 20kg/m3(Blanco)") || texto.contains("Media 20kg/m3") || texto.contains("Media 20") || texto.contains("20 kg/m3") || texto.contains("20kg/m3") || texto.contains("D.20")) {
            return "20";
        } else if (texto.contains("HR Ignífuga Medio 35 kg (Rosa)") || texto.contains("HR Ignífuga") || texto.contains("35 kg (Rosa)") || texto.contains("35 kg/m3") || texto.contains("HR 35")) {
            return "35";
        } else {
            return "no";
        }
    }

    public String limpiarAcentos(String cadena) {
        String limpio = null;
        if (cadena != null) {
            String valor = cadena;
            valor = valor.toUpperCase();
            // Normalizar texto para eliminar acentos, dieresis, cedillas y tildes
            limpio = Normalizer.normalize(valor, Normalizer.Form.NFD);
            // Quitar caracteres no ASCII excepto la enie, interrogacion que abre, exclamacion que abre, grados, U con dieresis.
            limpio = limpio.replaceAll("[^\\p{ASCII}(N\u0303)(n\u0303)(\u00A1)(\u00BF)(\u00B0)(U\u0308)(u\u0308)]", "");
            // Regresar a la forma compuesta, para poder comparar la enie con la tabla de valores
            limpio = Normalizer.normalize(limpio, Normalizer.Form.NFC);
        }
        return limpio;
    }

    private void escribirNuevoFichero(Sheet hojaActual, String ruta, String nombre_fichero, Row filaInicio) throws IOException, ParseException {
        String[] nombre_separado_extension = nombre_fichero.split("\\.");
        nombre_separado_extension[0] += "_clasificado"; // Escribimos el nombre del nuevo fichero
        ruta += nombre_separado_extension[0] + "." + nombre_separado_extension[1]; // Lo anidamos a la ruta

        // Empezamos a generar el fichero
        Workbook workbook = new XSSFWorkbook();
        //Creamos una nueva hoja
        Sheet sheet = workbook.createSheet("Hoja Principal");
        // sheet.getPrintSetup().setLandscape(true);
        sheet.getPrintSetup().setPaperSize(PrintSetup.A4_PAPERSIZE);
        sheet.getPrintSetup().setHResolution(PrintSetup.A4_PAPERSIZE);
        sheet.getPrintSetup().setScale((short) 65);
        sheet.setDisplayZeros(false);
        // Estilo cabecera
        CellStyle styleHeader = workbook.createCellStyle();
        styleHeader.setBorderBottom(BorderStyle.MEDIUM);
        styleHeader.setBorderTop(BorderStyle.MEDIUM);
        styleHeader.setBorderRight(BorderStyle.MEDIUM);
        styleHeader.setBorderLeft(BorderStyle.MEDIUM);
        styleHeader.setFillBackgroundColor(IndexedColors.DARK_BLUE.getIndex());

        // Escribimos la cabecera
        int j = 0;
        Iterator<Cell> citeHeader = filaInicio.cellIterator();
        Row row1 = sheet.createRow(0);
        while (citeHeader.hasNext()) {
            Cell c = citeHeader.next();

            Cell nc = row1.createCell(j++);

            if (c.toString().equals("Nombre transportista")) {
                //nc.setCellValue(c.toString().replace("Nombre ", ""));
                nc.setCellValue(c.toString().replace("Nombre transportista", "tran"));
            } else if (c.toString().equals("Nombre de producto")) {
                nc.setCellValue("Retal");
            } else if (c.toString().equals("Carrier by state")) {
                nc.setCellValue("Tota");
            } else {
                nc.setCellValue(c.toString());
            }
            nc.setCellStyle(styleHeader);
        }

        // Ahora debes clasificar las filas en "rows" en funcion de la densidad, probamos con arraylists
        // Se clasifican las filas en funcion de la columna 6 que es donde se almacena si el producto tiene densidad 20, 25, etc
        ArrayList<Row> d20 = new ArrayList();
        ArrayList<Row> d23 = new ArrayList();
        ArrayList<Row> d25 = new ArrayList();
        ArrayList<Row> d30 = new ArrayList();
        ArrayList<Row> d35 = new ArrayList();
        ArrayList<Row> otros = new ArrayList();

        Hashtable<String, Integer> articulos_por_pedido = new Hashtable<String, Integer>();
        ArrayList<String> id_pedidos = new ArrayList();

        String[] id_letra = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
            "AA", "AB", "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK", "AL", "AM", "AN", "AO", "AP", "AQ", "AR", "AS", "AT", "AU", "AV", "AW", "AX", "AY", "AZ",
            "BA", "BB", "BC", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BK", "BL", "BM", "BN", "BO", "BP", "BQ", "BR", "BS", "BT", "BU", "BV", "BW", "BX", "BY", "BZ",
            "CA", "CB", "CC", "CD", "CE", "CF", "CG", "CH", "CI", "CJ", "CK", "CL", "CM", "CN", "CO", "CP", "CQ", "CR", "CS", "CT", "CU", "CV", "CW", "CX", "CY", "CZ",
            "DA", "DB", "DC", "DD", "DE", "DF", "DG", "DH", "DI", "DJ", "DK", "DL", "DM", "DN", "DO", "DP", "DQ", "DR", "DS", "DT", "DU", "DV", "DW", "DX", "DY", "DZ",
            "EA", "EB", "EC", "ED", "EE", "EF", "EG", "EH", "EI", "EJ", "EK", "EL", "EM", "EN", "EO", "EP", "EQ", "ER", "ES", "ET", "EU", "EV", "EW", "EX", "EY", "EZ",
            "FA", "FB", "FC", "FD", "FE", "FF", "FG", "FH", "FI", "FJ", "FK", "FL", "FM", "FN", "FO", "FP", "FQ", "FR", "FS", "FT", "FU", "FV", "FW", "FX", "FY", "FZ",
            "GA", "GB", "GC", "GD", "GE", "GF", "GG", "GH", "GI", "GJ", "GK", "GL", "GM", "GN", "GO", "GP", "GQ", "GR", "GS", "GT", "GU", "GV", "GW", "GX", "GY", "GZ",
            "HA", "HB", "HC", "HD", "HE", "HF", "HG", "HH", "HI", "HJ", "HK", "HL", "HM", "HN", "HO", "HP", "HQ", "HR", "HS", "HT", "HU", "HV", "HW", "HX", "HY", "HZ",
            "IA", "IB", "IC", "ID", "IE", "IF", "IG", "IH", "II", "IJ", "IK", "IL", "IM", "IN", "IO", "IP", "IQ", "IR", "IS", "IT", "IU", "IV", "IW", "IX", "IY", "IZ",
            "JA", "JB", "JC", "JD", "JE", "JF", "JG", "JH", "JI", "JJ", "JK", "JL", "JM", "JN", "JO", "JP", "JQ", "JR", "JS", "JT", "JU", "JV", "JW", "JX", "JY", "JZ",
            "KA", "KB", "KC", "KD", "KE", "KF", "KG", "KH", "KI", "KJ", "KK", "KL", "KM", "KN", "KO", "KP", "KQ", "KR", "KS", "KT", "KU", "KV", "KW", "KX", "KY", "KZ"};

        // Preparamos la expresion regular para extraer datos del texto 
        Pattern equis = Pattern.compile("[0-9]*\\s*x\\s*[0-9]*\\s*x\\s*[0-9]*\\s*cm");
        Matcher equisM;

        Pattern letras = Pattern.compile("A:\\s*[0-9]*\\s*cm-\\s*B:\\s*[0-9]*\\s*cm-\\s*C:\\s*[0-9]*\\s*cm-");
        Matcher letrasM;

        Pattern comerciales = Pattern.compile("ANCHO:\\s*[0-9]*\\s*CM\\s*X\\s*LARGO:\\s*[0-9]*\\s*CM\\s*X\\s*GROSOR TOTAL:\\s*[0-9]*\\s*CM");
        Matcher comercialesM;

        // Abordamos el problema de clasificacion por densidad
        int cont = 0;
        String old_id_order = "00000";
        Iterator ite = hojaActual.rowIterator();
        while (ite.hasNext()) {
            Row row = (Row) ite.next();
            Cell celdaActual = row.getCell(7); // Obtenemos de la fila actual la informacion que nos interesa

            Cell grosor = row.getCell(8);
            Cell ancho = row.getCell(9);
            Cell largo = row.getCell(10);
            Cell aux;
            if (!celdaActual.toString().equals("Atributos")) {
                // Limpiamos los datos que no van a ser imprimidos
                for (int i = 17; i <= 26; i++) {
                    aux = row.getCell(i);
                    try {
                        aux.setCellValue("");
                    } catch (Exception ex) {

                    }
                }

                try {
                    // Obtenemos el ID de pedido
                    Cell id_order = row.getCell(2);

                    // Borramos una nota irrelevante para los de fabrica
                    row.getCell(13).setCellValue("");
                    row.getCell(14).setCellValue("");

                    // Comprobamos si el ID esta en el diccionario, y si no lo esta, lo metemos, y si esta, incrementamos el valor de lo que sera la cantidad total de un pedido
                    if (articulos_por_pedido.containsKey(id_order.toString())) {
                        articulos_por_pedido.replace(id_order.toString(), articulos_por_pedido.get(id_order.toString()), articulos_por_pedido.get(id_order.toString()) + 1);
                    } else {
                        articulos_por_pedido.put(id_order.toString(), 1);
                    }

                    //Asignamos otro ID a los productos que pertenecen al mismo pedido
                    Cell mensaje = row.getCell(11);
                    id_pedidos.add(id_order.toString());
                    if (id_order.toString().equals(old_id_order)) {
                        mensaje.setCellValue("(" + id_letra[cont] + ") " /*+ mensaje.toString()*/);
                    } else {
                        cont++;
                        mensaje.setCellValue("(" + id_letra[cont] + ") " /* + mensaje.toString()*/);
                        old_id_order = id_order.toString();
                    }

                    // Poblamos los datos de ancho largo y grosor a traves de expresiones regulares
                    String procesado = "";
                    String[] medidas;

                    equisM = equis.matcher(celdaActual.toString());
                    if (equisM.find()) {
                        procesado = equisM.group();
                        procesado = procesado.replace(" ", "");
                        procesado = procesado.substring(0, procesado.length() - 2);
                        medidas = procesado.split("x");
                        ancho.setCellValue(medidas[0]);
                        largo.setCellValue(medidas[1]);
                        grosor.setCellValue(medidas[2]);
                    }

                    letrasM = letras.matcher(celdaActual.toString());
                    if (letrasM.find()) {
                        if (celdaActual.toString().contains("CROQUIS")) {
                            procesado = letrasM.group();
                            procesado = procesado.replace(" ", "");
                            medidas = procesado.split("-");
                            for (int i = 0; i < medidas.length; i++) {
                                medidas[i] = medidas[i].substring(2, medidas[i].length() - 2);
                            }
                            ancho.setCellValue(medidas[0]);
                            largo.setCellValue(medidas[1]);
                            grosor.setCellValue(medidas[2]);
                        }
                    }
                    /*  Nuevo codigo añadido 2019.08.07  */
                    comercialesM = comerciales.matcher(celdaActual.toString().toUpperCase());
                    if (comercialesM.find()) {
                        if (!celdaActual.toString().toUpperCase().contains("CROQUIS")) {
                            procesado = comercialesM.group();
                            medidas = procesado.split("X");
                            for (int i = 0; i < medidas.length; i++) {
                                medidas[i] = medidas[i].split(":")[1].replace(" ", "").substring(0, medidas[i].split(":")[1].replace(" ", "").length() - 2);
                            }
                            ancho.setCellValue(medidas[0]);
                            largo.setCellValue(medidas[1]);
                            grosor.setCellValue(medidas[2]);
                        }
                    }
                    // Esta expresion regular sirve para indentificar las medidas de las camas de perro y poner si son de visco o espuma
                    Pattern equisP = Pattern.compile(":[0-9]*[0-9]x[0-9]*[0-9]cm-[A-z ]*-[0-9]*[0-9]cm[a-z]*");
                    Matcher equisp;

                    String aux_cama_perro;

                    aux_cama_perro = limpiarAcentos(celdaActual.toString());
                    aux_cama_perro = aux_cama_perro.replace(" ", "");
                    aux_cama_perro = aux_cama_perro.toLowerCase();

                    equisp = equisP.matcher(aux_cama_perro.toString());
                    if (equisp.find()) {
                        aux_cama_perro = equisp.group();
                        aux_cama_perro = aux_cama_perro.substring(1, aux_cama_perro.length());
                        medidas = aux_cama_perro.split("-");
                        for (int i = 0; i < medidas.length; i++) {
                            medidas[i] = medidas[i].replace("cm", "");
                            medidas[i] = medidas[i].replace("de", "");
                        }
                        //for(String s:medidas)System.out.println(s);
                        String ancho1 = medidas[0].split("x")[1];
                        String largo1 = medidas[0].split("x")[0];
                        String grosor1 = medidas[2];

                        if (grosor1.substring(grosor1.length() - 5, grosor1.length()).equals("visco")) {
                            grosor1 = grosor1.substring(0, grosor1.length() - 5);
                            grosor1 = grosor1 + "v";
                        } else {
                            grosor1 = grosor1.substring(0, grosor1.length() - 6);
                            grosor1 = grosor1;
                        }
                        ancho.setCellValue(ancho1);
                        largo.setCellValue(largo1);
                        grosor.setCellValue(grosor1);
                    }

                    // Se clasifican los distintos tipos de productos en los arrays
                    String resultado = algoritmoClasificacion(celdaActual.toString());
                    switch (resultado) {
                        case "20":
                            d20.add(row);
                            break;
                        case "23":
                            d23.add(row);
                            break;
                        case "25":
                            d25.add(row);
                            break;
                        case "30":
                            d30.add(row);
                            break;
                        case "35":
                            d35.add(row);
                            break;
                        case "no":
                            otros.add(row);
                            break;
                    }
                } catch (Exception ex) {

                }
            }
        }

        // Separamos los cm de grosor con los de visco y se indica la cantidad de articulos por pedido
        d20 = separarVisco(d20, articulos_por_pedido);
        d23 = separarVisco(d23, articulos_por_pedido);
        d25 = separarVisco(d25, articulos_por_pedido);
        d30 = separarVisco(d30, articulos_por_pedido);
        d35 = separarVisco(d35, articulos_por_pedido);
        //otros = separarVisco(otros, articulos_por_pedido); Se quita porque da un problema con el matcheador de expresiones regulares asociado a cama de perro

        try {
            // Abordamos el problema de clasificacion por densidad
            Collections.sort(d20, new Comparator<Row>() {
                @Override
                public int compare(Row p1, Row p2) {
                    String aux;
                    Matcher m4;
                    //Pattern p5 = Pattern.compile("[0-9][0-9]*\\.*[0-9][0-9]*\\+[0-9][0-9]*\\.*[0-9][0-9]*");
                    Pattern p5 = Pattern.compile("([0-9][0-9]*\\.*[0-9][0-9]*)\\+[0-9][0-9]*");
                    int n1, n2;
                    m4 = p5.matcher(p1.getCell(8).toString());
                    if (m4.find()) {
                        aux = m4.group();
                        n1 = (int) Double.parseDouble(aux.split("\\+")[0]);

                    } else {
                        n1 = (int) Double.parseDouble(p1.getCell(8).toString());
                    }
                    m4 = p5.matcher(p2.getCell(8).toString());
                    if (m4.find()) {
                        aux = m4.group();
                        n2 = (int) Double.parseDouble(aux.split("\\+")[0]);
                    } else {
                        n2 = (int) Double.parseDouble(p2.getCell(8).toString());
                    }

                    return new Integer(n1).compareTo(new Integer(n2));
                }
            });

            Collections.sort(d23, new Comparator<Row>() {
                @Override
                /*public int compare(Row p1, Row p2) {
                 return new Integer((int) Double.parseDouble(p1.getCell(8).toString())).compareTo(new Integer((int) Double.parseDouble(p2.getCell(8).toString())));
                 }*/
                public int compare(Row p1, Row p2) {
                    String aux;
                    Matcher m4;
                    //Pattern p5 = Pattern.compile("[0-9][0-9]*\\.*[0-9][0-9]*\\+[0-9][0-9]*\\.*[0-9][0-9]*");
                    Pattern p5 = Pattern.compile("([0-9][0-9]*\\.*[0-9][0-9]*)\\+[0-9][0-9]*");
                    int n1, n2;
                    m4 = p5.matcher(p1.getCell(8).toString());
                    if (m4.find()) {
                        aux = m4.group();
                        n1 = (int) Double.parseDouble(aux.split("\\+")[0]);

                    } else {
                        n1 = (int) Double.parseDouble(p1.getCell(8).toString());
                    }
                    m4 = p5.matcher(p2.getCell(8).toString());
                    if (m4.find()) {
                        aux = m4.group();
                        n2 = (int) Double.parseDouble(aux.split("\\+")[0]);
                    } else {
                        n2 = (int) Double.parseDouble(p2.getCell(8).toString());
                    }

                    return new Integer(n1).compareTo(new Integer(n2));
                }
            });

            Collections.sort(d25, new Comparator<Row>() {
                @Override
                public int compare(Row p1, Row p2) {
                    String aux;
                    Matcher m4;
                    //Pattern p5 = Pattern.compile("[0-9][0-9]*\\.*[0-9][0-9]*\\+[0-9][0-9]*\\.*[0-9][0-9]*");
                    Pattern p5 = Pattern.compile("([0-9][0-9]*\\.*[0-9][0-9]*)\\+[0-9][0-9]*");
                    int n1, n2;
                    m4 = p5.matcher(p1.getCell(8).toString());
                    if (m4.find()) {
                        aux = m4.group();
                        n1 = (int) Double.parseDouble(aux.split("\\+")[0]);

                    } else {
                        n1 = (int) Double.parseDouble(p1.getCell(8).toString());
                    }
                    m4 = p5.matcher(p2.getCell(8).toString());
                    if (m4.find()) {
                        aux = m4.group();
                        n2 = (int) Double.parseDouble(aux.split("\\+")[0]);
                    } else {
                        n2 = (int) Double.parseDouble(p2.getCell(8).toString());
                    }

                    return new Integer(n1).compareTo(new Integer(n2));
                }
            });

            Collections.sort(d30, new Comparator<Row>() {
                @Override
                public int compare(Row p1, Row p2) {
                    String aux;
                    Matcher m4;
                    //Pattern p5 = Pattern.compile("[0-9][0-9]*\\.*[0-9][0-9]*\\+[0-9][0-9]*\\.*[0-9][0-9]*");
                    Pattern p5 = Pattern.compile("([0-9][0-9]*\\.*[0-9][0-9]*)\\+[0-9][0-9]*");
                    int n1, n2;
                    m4 = p5.matcher(p1.getCell(8).toString());
                    if (m4.find()) {
                        aux = m4.group();
                        n1 = (int) Double.parseDouble(aux.split("\\+")[0]);

                    } else {
                        n1 = (int) Double.parseDouble(p1.getCell(8).toString());
                    }
                    m4 = p5.matcher(p2.getCell(8).toString());
                    if (m4.find()) {
                        aux = m4.group();
                        n2 = (int) Double.parseDouble(aux.split("\\+")[0]);
                    } else {
                        n2 = (int) Double.parseDouble(p2.getCell(8).toString());
                    }

                    return new Integer(n1).compareTo(new Integer(n2));
                }
            });

            Collections.sort(d35, new Comparator<Row>() {
                @Override
                public int compare(Row p1, Row p2) {
                    String aux;
                    Matcher m4;
                    //Pattern p5 = Pattern.compile("[0-9][0-9]*\\.*[0-9][0-9]*\\+[0-9][0-9]*\\.*[0-9][0-9]*");
                    Pattern p5 = Pattern.compile("([0-9][0-9]*\\.*[0-9][0-9]*)\\+[0-9][0-9]*");
                    int n1, n2;
                    m4 = p5.matcher(p1.getCell(8).toString());
                    if (m4.find()) {
                        aux = m4.group();
                        n1 = (int) Double.parseDouble(aux.split("\\+")[0]);

                    } else {
                        n1 = (int) Double.parseDouble(p1.getCell(8).toString());
                    }
                    m4 = p5.matcher(p2.getCell(8).toString());
                    if (m4.find()) {
                        aux = m4.group();
                        n2 = (int) Double.parseDouble(aux.split("\\+")[0]);
                    } else {
                        n2 = (int) Double.parseDouble(p2.getCell(8).toString());
                    }

                    return new Integer(n1).compareTo(new Integer(n2));
                }
            });

            Collections.sort(otros, new Comparator<Row>() {
                @Override
                public int compare(Row p1, Row p2) {
                    String aux;
                    Matcher m4;
                    //Pattern p5 = Pattern.compile("[0-9][0-9]*\\.*[0-9][0-9]*\\+[0-9][0-9]*\\.*[0-9][0-9]*");
                    Pattern p5 = Pattern.compile("([0-9][0-9]*\\.*[0-9][0-9]*)\\+[0-9][0-9]*");
                    int n1, n2;
                    m4 = p5.matcher(p1.getCell(8).toString());
                    if (m4.find()) {
                        aux = m4.group();
                        n1 = (int) Double.parseDouble(aux.split("\\+")[0]);

                    } else {
                        n1 = (int) Double.parseDouble(p1.getCell(8).toString());
                    }
                    m4 = p5.matcher(p2.getCell(8).toString());
                    if (m4.find()) {
                        aux = m4.group();
                        n2 = (int) Double.parseDouble(aux.split("\\+")[0]);
                    } else {
                        n2 = (int) Double.parseDouble(p2.getCell(8).toString());
                    }

                    return new Integer(n1).compareTo(new Integer(n2));
                }
            });
        } catch (Exception ex) {
            // ex.printStackTrace();
        }

        // Formateamos celdas
        CellStyle style = workbook.createCellStyle();
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setWrapText(true); // O pone el texto arriba del todo o abajo del todo

        CellStyle style2 = workbook.createCellStyle();
        style2.setBorderBottom(BorderStyle.THIN);
        style2.setBorderTop(BorderStyle.THIN);
        style2.setBorderRight(BorderStyle.THIN);
        style2.setBorderLeft(BorderStyle.THIN);
        style2.setWrapText(true);
        style2.setFillForegroundColor(IndexedColors.LIGHT_CORNFLOWER_BLUE.getIndex());
        style2.setFillBackgroundColor(IndexedColors.LIGHT_CORNFLOWER_BLUE.getIndex());
        style2.setFillPattern(FillPatternType.SOLID_FOREGROUND);

        // Ahora que hemos clasificado los productos volcamos los datos en el excel
        int col = 0;
        Iterator<Cell> iteratorCeldas;
        Row rowAux = null;
        int dias = 0;
        Date fechaActual = new Date();
        SimpleDateFormat objSDF = new SimpleDateFormat("dd-MM-yyyy");
        // Densidad 20
        int fila = 1;
        int f;
        d20 = eliminarPedidosUnicos(d20, id_pedidos);
        d20 = buscarRetales(d20, "Densidad 20");
        for (int i = 0; i < d20.size(); i++) {

            // Comprobar si el producto tiene tela o no
            boolean tela = comprobarTelaProducto(d20.get(i).getCell(7).toString());

            iteratorCeldas = d20.get(i).cellIterator();
            f = 0;
            rowAux = sheet.createRow(fila++);
            col = 0;
            while (iteratorCeldas.hasNext()) {
                Cell c = iteratorCeldas.next();
                Cell nc = rowAux.createCell(col++);
                //if (col == 16) System.out.println(c.toString());
                if (isDouble(c.toString())) {
                    if (col == 3 || col == 6 || col == 16) {
                        nc.setCellValue(c.toString().substring(0, c.toString().length() - 2));
                    } else {
                        nc.setCellValue(c.toString());
                    }
                } else {
                    if (col == 4 && c.toString().contains("/")) {
                        Date dt = objSDF.parse(c.toString().replace("/", "-"));
                        dias = (int) ((fechaActual.getTime() - dt.getTime()) / 86400000); // 1 Dia = 86.400.000 Milisegundos
                        if (dias >= 4) {
                            nc.setCellStyle(style2);
                        } else {
                            nc.setCellStyle(style);
                        }
                        nc.setCellValue(c.toString());
                    } else if (col != 8) {
                        nc.setCellValue(c.toString());
                    } else {
                        if (c.toString().contains("Palet")) {
                            nc.setCellValue(c.toString());
                        } else {
                            if (c.toString().contains("CROQUIS") && c.toString().contains("Plegable")) {
                                nc.setCellValue(c.toString());
                            } else if (!c.toString().contains("CROQUIS") && c.toString().contains("Plegable")) {
                                if (c.toString().contains("Furgoneta") || c.toString().contains("Autocaravana")) {
                                    nc.setCellValue(c.toString());
                                } else {
                                    if (c.toString().contains("A Medida")) {
                                        nc.setCellValue(c.toString());
                                    } else {
                                        if (tela) {
                                            nc.setCellValue("D20-Plegable-Tela");
                                        } else {
                                            nc.setCellValue("D20-Plegable");
                                        }
                                    }
                                }
                            } else if (c.toString().contains("CROQUIS") && !c.toString().contains("Plegable")) {
                                if (tela) {
                                    nc.setCellValue("D20-Croquis-Tela");
                                } else {
                                    nc.setCellValue("D20-Croquis");
                                }
                            } else {
                                if (c.toString().contains("Cuña") || c.toString().contains("Furgoneta") || c.toString().contains("Camper")) {
                                    nc.setCellValue(c.toString());
                                } else {
                                    if (tela) {
                                        nc.setCellValue("D20-Tela");
                                    } else {
                                        nc.setCellValue("D20");
                                    }
                                }
                            }
                        }
                    }
                }
                if (col == 18) {
                    nc.setCellStyle(style2);
                } else if (col != 18 && col != 4) {
                    nc.setCellStyle(style);
                }
            }
        }

        rowAux = sheet.createRow(fila++);
        rowAux = sheet.createRow(fila++);

        // Densidad 23
        d23 = eliminarPedidosUnicos(d23, id_pedidos);
        d23 = buscarRetales(d23, "Densidad 23");
        for (int i = 0; i < d23.size(); i++) {

            // Comprobar si el producto tiene tela o no
            boolean tela = comprobarTelaProducto(d23.get(i).getCell(7).toString());

            iteratorCeldas = d23.get(i).cellIterator();
            f = 0;
            rowAux = sheet.createRow(fila++);
            col = 0;
            while (iteratorCeldas.hasNext()) {
                Cell c = iteratorCeldas.next();
                Cell nc = rowAux.createCell(col++);
                if (isDouble(c.toString())) {
                    if (col == 3 || col == 6 || col == 16) {
                        nc.setCellValue(c.toString().substring(0, c.toString().length() - 2));
                    } else {
                        nc.setCellValue(c.toString());
                    }
                } else {
                    if (col == 4 && c.toString().contains("/")) {
                        Date dt = objSDF.parse(c.toString().replace("/", "-"));
                        dias = (int) ((fechaActual.getTime() - dt.getTime()) / 86400000); // 1 Dia = 86.400.000 Milisegundos
                        if (dias >= 4) {
                            nc.setCellStyle(style2);
                        } else {
                            nc.setCellStyle(style);
                        }
                        nc.setCellValue(c.toString());
                    } else if (col != 8) {
                        nc.setCellValue(c.toString());
                    } else {
                        if (c.toString().contains("Palet")) {
                            nc.setCellValue(c.toString());
                        } else {
                            if (c.toString().contains("CROQUIS") && c.toString().contains("Plegable")) {
                                nc.setCellValue(c.toString());
                            } else if (!c.toString().contains("CROQUIS") && c.toString().contains("Plegable")) {
                                if (c.toString().contains("Furgoneta") || c.toString().contains("Autocaravana")) {
                                    nc.setCellValue(c.toString());
                                } else {
                                    if (c.toString().contains("A Medida")) {
                                        nc.setCellValue(c.toString());
                                    } else {
                                        if (tela) {
                                            nc.setCellValue("D23-Plegable-Tela");
                                        } else {
                                            nc.setCellValue("D23-Plegable");
                                        }
                                    }
                                }
                            } else if (c.toString().contains("CROQUIS") && !c.toString().contains("Plegable")) {
                                if (tela) {
                                    nc.setCellValue("D23-Croquis-Tela");
                                } else {
                                    nc.setCellValue("D23-Croquis");
                                }
                            } else {
                                if (c.toString().contains("Cuña") || c.toString().contains("Furgoneta") || c.toString().contains("Camper")) {
                                    nc.setCellValue(c.toString());
                                } else {
                                    if (tela) {
                                        nc.setCellValue("D23-Tela");
                                    } else {
                                        nc.setCellValue("D23");
                                    }
                                }
                            }
                        }
                    }
                }
                if (col == 18) {
                    nc.setCellStyle(style2);
                } else if (col != 18 && col != 4) {
                    nc.setCellStyle(style);
                }
            }
        }

        rowAux = sheet.createRow(fila++);
        rowAux = sheet.createRow(fila++);

        //Densidad 25
        Cell buscar_plegable_estandar;
        d25 = eliminarPedidosUnicos(d25, id_pedidos);
        d25 = buscarRetales(d25, "Densidad 25");
        for (int i = 0; i < d25.size(); i++) {

            // Comprobar si el producto tiene tela o no
            boolean tela = comprobarTelaProducto(d25.get(i).getCell(7).toString());
            buscar_plegable_estandar = d25.get(i).getCell(7);

            if (!buscar_plegable_estandar.toString().contains("palet") && !buscar_plegable_estandar.toString().contains("CROQUIS") && buscar_plegable_estandar.toString().contains("Plegable")
                    && !(buscar_plegable_estandar.toString().contains("Furgoneta") || buscar_plegable_estandar.toString().contains("Autocaravana")) && !buscar_plegable_estandar.toString().contains("A Medida")) {
                // System.out.println(buscar_plegable_estandar.toString());
                continue;
            }

            iteratorCeldas = d25.get(i).cellIterator();
            f = 0;
            rowAux = sheet.createRow(fila++);
            col = 0;
            while (iteratorCeldas.hasNext()) {
                Cell c = iteratorCeldas.next();
                Cell nc = rowAux.createCell(col++);
                if (isDouble(c.toString())) {
                    if (col == 3 || col == 6 || col == 16) {
                        nc.setCellValue(c.toString().substring(0, c.toString().length() - 2));
                    } else {
                        nc.setCellValue(c.toString());
                    }
                } else {
                    if (col == 4 && c.toString().contains("/")) {
                        Date dt = objSDF.parse(c.toString().replace("/", "-"));
                        dias = (int) ((fechaActual.getTime() - dt.getTime()) / 86400000); // 1 Dia = 86.400.000 Milisegundos
                        if (dias >= 4) {
                            nc.setCellStyle(style2);
                        } else {
                            nc.setCellStyle(style);
                        }
                        nc.setCellValue(c.toString());
                    } else if (col != 8) {
                        nc.setCellValue(c.toString());
                    } else {
                        if (c.toString().contains("Palet")) {
                            nc.setCellValue(c.toString());
                        } else {
                            if (c.toString().contains("CROQUIS") && c.toString().contains("Plegable")) {
                                nc.setCellValue(c.toString());
                            } else if (!c.toString().contains("CROQUIS") && c.toString().contains("Plegable")) {
                                if (c.toString().contains("Furgoneta") || c.toString().contains("Autocaravana")) {
                                    nc.setCellValue(c.toString());
                                } else {
                                    if (c.toString().contains("A Medida")) {
                                        nc.setCellValue(c.toString());
                                    } else {
                                        if (tela) {
                                            nc.setCellValue("D25-Plegable-Tela");
                                        } else {
                                            nc.setCellValue("D25-Plegable");
                                        }
                                    }
                                }
                            } else if (c.toString().contains("CROQUIS") && !c.toString().contains("Plegable")) {
                                if (tela) {
                                    nc.setCellValue("D25-Croquis-Tela");
                                } else {
                                    nc.setCellValue("D25-Croquis");
                                }
                            } else {
                                if (c.toString().contains("Cuña") || c.toString().contains("Furgoneta") || c.toString().contains("Camper")) {
                                    nc.setCellValue(c.toString());
                                } else {
                                    if (tela) {
                                        nc.setCellValue("D25-Tela");
                                    } else {
                                        nc.setCellValue("D25");
                                    }
                                }
                            }
                        }
                    }
                }
                if (col == 18) {
                    nc.setCellStyle(style2);
                } else if (col != 18 && col != 4) {
                    nc.setCellStyle(style);
                }
            }
        }

        rowAux = sheet.createRow(fila++);
        rowAux = sheet.createRow(fila++);

        //Densidad 30
        d30 = eliminarPedidosUnicos(d30, id_pedidos);
        d30 = buscarRetales(d30, "Densidad 30");
        for (int i = 0; i < d30.size(); i++) {

            // Comprobar si el producto tiene tela o no
            boolean tela = comprobarTelaProducto(d30.get(i).getCell(7).toString());

            iteratorCeldas = d30.get(i).cellIterator();
            f = 0;
            rowAux = sheet.createRow(fila++);
            col = 0;
            while (iteratorCeldas.hasNext()) {
                Cell c = iteratorCeldas.next();
                Cell nc = rowAux.createCell(col++);
                if (isDouble(c.toString())) {
                    if (col == 3 || col == 6 || col == 16) {
                        nc.setCellValue(c.toString().substring(0, c.toString().length() - 2));
                    } else {
                        nc.setCellValue(c.toString());
                    }
                } else {
                    if (col == 4 && c.toString().contains("/")) {
                        Date dt = objSDF.parse(c.toString().replace("/", "-"));
                        dias = (int) ((fechaActual.getTime() - dt.getTime()) / 86400000); // 1 Dia = 86.400.000 Milisegundos
                        if (dias >= 4) {
                            nc.setCellStyle(style2);
                        } else {
                            nc.setCellStyle(style);
                        }
                        nc.setCellValue(c.toString());
                    } else if (col != 8) {
                        nc.setCellValue(c.toString());
                    } else {
                        if (c.toString().contains("Palet")) {
                            nc.setCellValue(c.toString());
                        } else {
                            if (c.toString().contains("CROQUIS") && c.toString().contains("Plegable")) {
                                nc.setCellValue(c.toString());
                            } else if (!c.toString().contains("CROQUIS") && c.toString().contains("Plegable")) {
                                if (c.toString().contains("Furgoneta") || c.toString().contains("Autocaravana")) {
                                    nc.setCellValue(c.toString());
                                } else {
                                    if (c.toString().contains("A Medida")) {
                                        nc.setCellValue(c.toString());
                                    } else {
                                        if (tela) {
                                            nc.setCellValue("D30-Plegable-Tela");
                                        } else {
                                            nc.setCellValue("D30-Plegable");
                                        }
                                    }
                                }
                            } else if (c.toString().contains("CROQUIS") && !c.toString().contains("Plegable")) {
                                if (tela) {
                                    nc.setCellValue("D30-Croquis-Tela");
                                } else {
                                    nc.setCellValue("D30-Croquis");
                                }
                            } else {
                                if (c.toString().contains("Cuña") || c.toString().contains("Furgoneta") || c.toString().contains("Camper")) {
                                    nc.setCellValue(c.toString());
                                } else {
                                    if (tela) {
                                        nc.setCellValue("D30-Tela");
                                    } else {
                                        nc.setCellValue("D30");
                                    }
                                }
                            }
                        }
                    }
                }
                if (col == 18) {
                    nc.setCellStyle(style2);
                } else if (col != 18 && col != 4) {
                    nc.setCellStyle(style);
                }
            }
        }

        rowAux = sheet.createRow(fila++);
        rowAux = sheet.createRow(fila++);

        //Densidad 35
        d35 = eliminarPedidosUnicos(d35, id_pedidos);
        d35 = buscarRetales(d35, "Densidad 35");
        for (int i = 0; i < d35.size(); i++) {

            // Comprobar si el producto tiene tela o no
            boolean tela = comprobarTelaProducto(d35.get(i).getCell(7).toString());

            iteratorCeldas = d35.get(i).cellIterator();
            f = 0;
            rowAux = sheet.createRow(fila++);
            col = 0;
            while (iteratorCeldas.hasNext()) {
                Cell c = iteratorCeldas.next();
                Cell nc = rowAux.createCell(col++);
                if (isDouble(c.toString())) {
                    if (col == 3 || col == 6 || col == 16) {
                        nc.setCellValue(c.toString().substring(0, c.toString().length() - 2));
                    } else {
                        nc.setCellValue(c.toString());
                    }
                } else {
                    if (col == 4 && c.toString().contains("/")) {
                        Date dt = objSDF.parse(c.toString().replace("/", "-"));
                        dias = (int) ((fechaActual.getTime() - dt.getTime()) / 86400000); // 1 Dia = 86.400.000 Milisegundos
                        if (dias >= 4) {
                            nc.setCellStyle(style2);
                        } else {
                            nc.setCellStyle(style);
                        }
                        nc.setCellValue(c.toString());
                    } else if (col != 8) {
                        nc.setCellValue(c.toString());
                    } else {
                        if (c.toString().contains("Palet")) {
                            nc.setCellValue(c.toString());
                        } else {
                            if (c.toString().contains("CROQUIS") && c.toString().contains("Plegable")) {
                                nc.setCellValue(c.toString());
                            } else if (!c.toString().contains("CROQUIS") && c.toString().contains("Plegable")) {
                                if (c.toString().contains("Furgoneta") || c.toString().contains("Autocaravana")) {
                                    nc.setCellValue(c.toString());
                                } else {
                                    if (c.toString().contains("A Medida")) {
                                        nc.setCellValue(c.toString());
                                    } else {
                                        if (tela) {
                                            nc.setCellValue("D35-Plegable-Tela");
                                        } else {
                                            nc.setCellValue("D35-Plegable");
                                        }
                                    }
                                }
                            } else if (c.toString().contains("CROQUIS") && !c.toString().contains("Plegable")) {
                                if (tela) {
                                    nc.setCellValue("D35-Croquis-Tela");
                                } else {
                                    nc.setCellValue("D35-Croquis");
                                }
                            } else {
                                if (c.toString().contains("Cuña") || c.toString().contains("Furgoneta") || c.toString().contains("Camper")) {
                                    nc.setCellValue(c.toString());
                                } else {
                                    if (tela) {
                                        nc.setCellValue("D35-Tela");
                                    } else {
                                        nc.setCellValue("D35");
                                    }
                                }
                            }
                        }
                    }
                }
                if (col == 18) {
                    nc.setCellStyle(style2);
                } else if (col != 18 && col != 4) {
                    nc.setCellStyle(style);
                }
            }
        }

        rowAux = sheet.createRow(fila++);
        rowAux = sheet.createRow(fila++);

        //Otros
        otros = eliminarPedidosUnicos(otros, id_pedidos);
        for (int i = 0; i < otros.size(); i++) {

            // Este try catch es un parche por un error acarreado del programa php
            try {
                //System.out.println("---------------------------");
                //System.out.println(otros.get(i).getCell(0).toString()+" - "+otros.get(i).getCell(5).toString().length());
                String s = otros.get(i).getCell(0).toString();
                //imprimirFila(otros.get(i));
                //Integer.parseInt(otros.get(i).getCell(5).toString());
                //Double.parseDouble(otros.get(i).getCell(5).toString());
            } catch (Exception e) {
                // System.out.println("Entra - ");
                // e.printStackTrace();
                continue;
            }

            // Se descartan las filas que contienen pedidos que no les interesan a los de espumas
            if (otros.get(i).getCell(7).toString().contains("Funda a Medida")) {
                continue;
            } else if (otros.get(i).getCell(7).toString().contains("Plancha de Visco") || otros.get(i).getCell(7).toString().contains("Topper Visco Dream")) {
                boolean continuar = checkTopperPlanchaEstandar(otros.get(i).getCell(7));
                if (!continuar) {
                    continue;
                }
            } else if (otros.get(i).getCell(7).toString().contains("Copos de picado de espuma")) {
                continue;
            }

            iteratorCeldas = otros.get(i).cellIterator();
            f = 0;
            rowAux = sheet.createRow(fila++);
            col = 0;
            while (iteratorCeldas.hasNext()) {
                Cell c = iteratorCeldas.next();
                Cell nc = rowAux.createCell(col++);
                if (isDouble(c.toString())) {
                    if (col == 3 || col == 6 || col == 16) {
                        nc.setCellValue(c.toString().substring(0, c.toString().length() - 2));
                    } else {
                        nc.setCellValue(c.toString());
                    }
                } else {
                    if (col == 4 && c.toString().contains("/")) {
                        Date dt = objSDF.parse(c.toString().replace("/", "-"));
                        dias = (int) ((fechaActual.getTime() - dt.getTime()) / 86400000); // 1 Dia = 86.400.000 Milisegundos
                        if (dias >= 4) {
                            nc.setCellStyle(style2);
                        } else {
                            nc.setCellStyle(style);
                        }
                        nc.setCellValue(c.toString());
                    } else if (col != 8) {
                        nc.setCellValue(c.toString());
                    } else {
                        if (c.toString().contains("Palet")) {
                            nc.setCellValue(c.toString());
                        } else {
                            if (c.toString().contains("Copos de picado de espuma")) {
                                // Aqui no entra porque lo descartamos en el if de arriba
                                nc.setCellValue(c.toString().replace("Copos de picado de espuma", ""));
                            } else {
                                nc.setCellValue(c.toString());
                            }
                        }
                    }
                }
                if (col == 18) {
                    nc.setCellStyle(style2);
                } else if (col != 18 && col != 4) {
                    nc.setCellStyle(style);
                }
            }
        }

        // Estilizar las columnas deseadas
        sheet.setColumnWidth(2, 2500);
        sheet.setColumnWidth(3, 3000);
        sheet.setColumnWidth(5, 1100);
        sheet.setColumnWidth(8, 2100);
        sheet.setColumnWidth(9, 1100);
        sheet.setColumnWidth(10, 1400);
        sheet.setColumnWidth(11, 2500);
        sheet.setColumnWidth(12, 10000);
        sheet.setColumnWidth(15, 1100);
        sheet.setColumnWidth(16, 1000);
        sheet.setColumnWidth(17, 1);
        //sheet.autoSizeColumn((short) 11);
        //sheet.setColumnWidth(13, 3500);
        //sheet.autoSizeColumn((short) 14);
        //sheet.autoSizeColumn((short) 15);
        sheet.setColumnWidth(7, 5500);
        sheet.setColumnWidth(6, 1000);
        sheet.setColumnWidth(23, 10000);
        sheet.setColumnWidth(24, 10000);
        // Ocultar las no deseadas
        sheet.setColumnWidth(0, 1);
        sheet.setColumnWidth(1, 1);
        sheet.setColumnWidth(4, 1);
        //sheet.setColumnWidth(6, 1);
        sheet.setColumnWidth(13, 1);
        sheet.setColumnWidth(14, 1);

        for (int i = 18; i < 27; i++) {
            sheet.setColumnWidth(i, 1);
        }

        // Finalmente volcamos todo en el excel
        FileOutputStream fos = new FileOutputStream(new File(ruta));

        workbook.write(fos);
        fos.close();
    }

    public boolean isDouble(String numero) {
        try {
            Double.parseDouble(numero);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private void btnClasificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClasificarActionPerformed
        // TODO add your handling code here:

        File archivoExcel = this.archivo_procesar; //ruta del archivo xls o xlsx
        String[] path = this.ruta.split("\\\\");
        String nueva_ruta = "";
        for (int i = 0; i < path.length - 1; i++) {
            nueva_ruta += path[i] + "\\";
        }

        Workbook libroExcel;
        try {
            ZipSecureFile.setMinInflateRatio(0);
            libroExcel = WorkbookFactory.create(new FileInputStream(archivoExcel)); //crear un libro excel
            Sheet hojaActual = libroExcel.getSheetAt(0); //acceder a la primera hoja
            Row filaActual = hojaActual.getRow(0); //acceder a la primera fila en la hoja
            escribirNuevoFichero(hojaActual, nueva_ruta, path[path.length - 1], filaActual);
            String nuevo_fichero = this.ruta.substring(0, this.ruta.length() - 5) + "_clasificado.xlsx";
            libroExcel = WorkbookFactory.create(new FileInputStream(new File(nuevo_fichero)));
            hojaActual = libroExcel.getSheetAt(0);
            asignarFilas(hojaActual, libroExcel, nuevo_fichero);
            JOptionPane.showMessageDialog(null, "La clasificacion ha finalizado", "alert", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (EncryptedDocumentException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnClasificarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntBuscar;
    private javax.swing.JButton btnClasificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables

    GestorRetales gr;

    private ArrayList<Row> eliminarPedidosUnicos(ArrayList<Row> d20, ArrayList<String> id_pedidos) {
        int repetidos = 0;
        String id;
        for (int i = 0; i < d20.size(); i++) {
            id = d20.get(i).getCell(2).toString();
            for (int j = 0; j < id_pedidos.size(); j++) {
                if (id.equals(id_pedidos.get(j))) {
                    repetidos++;
                }
            }
            if (repetidos == 1) {
                d20.get(i).getCell(11).setCellValue("");
            }
            d20.get(i).getCell(6).setCellValue("");
            d20.get(i).getCell(4).setCellValue("");
            if (d20.get(i).getCell(3).toString().length() > 11) {
                d20.get(i).getCell(3).setCellValue(d20.get(i).getCell(3).toString().substring(0, 10));
            }
            repetidos = 0;
        }

        return d20;
    }

    private ArrayList<Row> separarVisco(ArrayList<Row> d20, Hashtable<String, Integer> articulos_por_pedido) {
        int repetidos = 0;
        String titulo;
        String grosor;
        Row actual;

        String aux;
        Matcher m4;
        Pattern p5 = Pattern.compile("[0-9][0-9]*\\s*cm\\s*(de)*\\s*visco");
        String visco;
        String id_pedido;

        for (int i = 0; i < d20.size(); i++) {
            actual = d20.get(i);

            // Separamos la visco del grosor
            titulo = actual.getCell(7).toString();
            grosor = actual.getCell(8).toString();

            m4 = p5.matcher(titulo.toLowerCase());
            if (m4.find()) {
                aux = m4.group();
                Pattern paux = Pattern.compile("[0-9][0-9]*");
                Matcher maux = paux.matcher(aux);
                if (maux.find()) {
                    visco = maux.group();
                    if (!grosor.equals("")) {
                        double gAct;
                        double vArt;

                        if (isDouble(grosor)) {
                            gAct = Double.parseDouble(grosor);
                            vArt = Double.parseDouble(visco);
                        } else {
                            gAct = Integer.parseInt(grosor);
                            vArt = Integer.parseInt(visco);
                        }
                        if (gAct != 0) {
                            double dif = gAct - vArt;
                            actual.getCell(8).setCellValue((dif + "+" + vArt + "v"));
                        }
                    }
                }
            }

            // A los pedidos que no sean unicos, se les mete la cantidad de articulos por pedido
            id_pedido = actual.getCell(2).toString();
            if (articulos_por_pedido.containsKey(id_pedido)) {
                if (articulos_por_pedido.get(id_pedido) != 1) {
                    actual.getCell(17).setCellValue(articulos_por_pedido.get(id_pedido));
                }
            }
        }

        return d20;
    }

    private ArrayList<Row> buscarRetales(ArrayList<Row> filas, String densidad) { //SIN EMPEZAR
        // Diferentes valores de densidad:Densidad 20,Densidad 23,Densidad 25,Densidad 30,Densidad 35, otros
        if (densidad.equals("otros")) {
            return filas;
        }

        Pattern p5 = Pattern.compile("[0-9][0-9]*\\+[0-9][0-9]*");
        Matcher m4;
        String ancho, grosor, largo;
        String retal;
        ArrayList<String> posibles_retales = new ArrayList<String>();
        // El retal va en la columna 6
        for (int i = 0; i < filas.size(); i++) {
            ancho = filas.get(i).getCell(9).toString();
            largo = filas.get(i).getCell(10).toString();
            grosor = filas.get(i).getCell(8).toString();

            if (grosor.equals("")) {
                continue;
            } else {
                m4 = p5.matcher(grosor);
                if (m4.find()) {
                    grosor = m4.group().split("\\+")[0];
                }
            }

            posibles_retales = c.searchRetal(densidad, (int) Double.parseDouble(ancho), (int) Double.parseDouble(largo), (int) Double.parseDouble(grosor));
            retal = gr.mejorRetal(posibles_retales, ((int) Double.parseDouble(ancho) + "," + (int) Double.parseDouble(largo) + "," + (int) Double.parseDouble(grosor) + "," + densidad));

            if (!retal.equals("") && !retal.equals("-")) {
                filas.get(i).getCell(6).setCellValue(retal);
            }
        }

        return filas;
    }

    private void imprimirFila(Row row) {
        // Escribimos la cabecera
        int j = 0;
        Iterator<Cell> citeHeader = row.cellIterator();
        while (citeHeader.hasNext()) {
            Cell c = citeHeader.next();
            System.out.print(c.toString() + " | ");
        }
        System.out.println("");
    }

    private boolean checkTopperPlanchaEstandar(Cell celdaActual) {
        Pattern equis = Pattern.compile("[0-9][0-9]*\\s*x\\s*[0-9][0-9]*\\s*cm");
        Matcher equisM;
        String procesado = "";
        boolean continuar = true;

        equisM = equis.matcher(celdaActual.toString());
        if (equisM.find()) {
            procesado = equisM.group();
            procesado = procesado.replace(" ", "");
            if (procesado.equals("90x190cm") || procesado.equals("90x200cm") || procesado.equals("105x190cm") || procesado.equals("105x200cm") || procesado.equals("135x190cm") || procesado.equals("135x200cm") || procesado.equals("150x190cm") || procesado.equals("150x200cm")) {
                continuar = false;
            }
        }
        return continuar;
    }

    private boolean comprobarTelaProducto(String titulo) {
        boolean tela = false;

        titulo = titulo.toLowerCase();
        if (titulo.contains("loneta") || titulo.contains("polipiel") || titulo.contains("powerloom") || titulo.contains("strecht") || titulo.contains("desenfundable")) {
            tela = true;
        }

        return tela;
    }

    private void asignarFilas(Sheet hojaActual, Workbook workbook, String ruta) throws IOException {
        Hashtable<String, IdsPorFila> filas_por_pedido = new Hashtable<String, IdsPorFila>();
        ArrayList<String> id_pedidos = new ArrayList();

        int fila = 1;
        IdsPorFila objF;

        Iterator ite = hojaActual.rowIterator();
        while (ite.hasNext()) {
            Row row = (Row) ite.next();
            Cell c_id_pedido = row.getCell(2);

            if (c_id_pedido != null) {
                if (!c_id_pedido.toString().equals("Número de pedido")) {
                    if (!id_pedidos.contains(c_id_pedido.toString())) {
                        id_pedidos.add(c_id_pedido.toString());
                    }

                    if (filas_por_pedido.containsKey(c_id_pedido.toString())) {
                        filas_por_pedido.get(c_id_pedido.toString()).addFila(fila);
                    } else {
                        objF = new IdsPorFila(Double.parseDouble(c_id_pedido.toString()));
                        objF.addFila(fila);
                        filas_por_pedido.put(c_id_pedido.toString(), objF);
                    }
                    row.getCell(1).setCellValue(fila);
                }
            }
            fila++;
        }

        ite = hojaActual.rowIterator();
        while (ite.hasNext()) {
            Row row = (Row) ite.next();
            Cell c_id_pedido = row.getCell(2);

            if (c_id_pedido != null) {
                if (!c_id_pedido.toString().equals("Número de pedido")) {
                    if (row.getCell(11) != null) {
                        String valor = filas_por_pedido.get(c_id_pedido.toString()).gestorID();
                        row.getCell(11).setCellValue(valor);
                    }
                }
            }

        }

        hojaActual.setColumnWidth(1, 1000);

        // Finalmente volcamos todo en el excel
        FileOutputStream fos = new FileOutputStream(new File(ruta));

        workbook.write(fos);
        fos.close();
    }

}
